apply plugin: 'groovy'
apply plugin: "geb-saucelabs"

// 宣告變數
ext {
    drivers = ["firefox", "chrome"]
    groovyVersion = '2.4.5'
    gebVersion = '0.12.1'
    spockVersion = '1.0-groovy-2.4'
    seleniumVersion = '2.48.2'
    chromeDriverVersion = '2.10'
    // https://docs.gradle.org/current/userguide/writing_build_scripts.html
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.gebish:geb-gradle:0.12.0"
    }
}


repositories {
    jcenter()
    maven { url "http://repository-saucelabs.forge.cloudbees.com/release" }
}

dependencies {
    sauceConnect "com.saucelabs:ci-sauce:1.81"
    compile "org.codehaus.groovy:groovy-all:$groovyVersion"

    testCompile "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-ie-driver:$seleniumVersion"
    testCompile "org.gebish:geb-spock:$gebVersion"
    testCompile "org.spockframework:spock-core:$spockVersion"
    // testCompile 'junit:junit:4.12'


}

sauceLabs {
    browsers {
        firefox_linux_39 {
            capabilities(
                    name: "FireFox Linux 39 Test",
                    browserName: "FireFox",
                    passed: "true"
            )
        }

        internet_explorer_11 {
            capabilities(
                    name: "Internet Explorer 11 Test",
                    browserName: "iexplore",
                    passed: "true",
                    screenResolution: "1280x1024",
                    version: "11",
                    platform: "Windows 7"
            )
        }
    }
    task {
        testClassesDir = test.testClassesDir
        testSrcDirs = test.testSrcDirs
        classpath = test.classpath
    }
    account {
        username = System.getenv(SauceAccount.USER_ENV_VAR)
        accessKey = System.getenv(SauceAccount.ACCESS_KEY_ENV_VAR)
    }
}

drivers.each { driver ->
    task "${driver}Test"(type: Test) {
        reports {
            html.destination = reporting.file("$name/tests")
            junitXml.destination = file("$buildDir/test-results/$name")
        }

        outputs.upToDateWhen { false }  // Always run tests

        systemProperty "geb.build.reportsDir", reporting.file("$name/geb")
        systemProperty "geb.env", driver
    }
}

test {
    dependsOn drivers.collect { tasks["${it}Test"] }
    enabled = false
}